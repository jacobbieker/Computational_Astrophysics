Theta Muscae is a triple star with the masses of WR48: 60, O6: 40, and O9.5B0Iab: 20 solar masses. 

For the purposes of the simulation we age them to 4 Myr where their masses are 40, 29, 20 solar masses 
respectively. From the literature we found that the period of the orbit of the inner binary (WR48 and 
the O6 star) is 19 days and that the period of the outer binary (inner binary and the O9.5B0Iab star) 
completes one orbit every five years. 


In order to accurately simulate a three-body star system you need to take in to account stellar evolution in addition to the gravitational simulator. Our task was to figure out what is the best method to integrate the stellar evolution and the gravity simulation. In order to accomplish this, we compare three integrator methods, three gravity solvers (Huayno, Hermite, and SmallN) across many different timesteps.
Temporal discretization involves integration of every term in differential equations over time step. The organization of this code is as follows: Each of the Hermite/, Huayno/, and SmallN/ folders holds all the plot outputs from running the current code for those gravity methods. Inside those is an ALL folder which contains all the plots that compare the various methods. Interesting_Plots holds plots that the group found
interesting and more directly useful to discuss. Our code is split into two files as well. GravStellar contains the class combining gravitational and stellar evolution, while triple_star_system is the script that sets up and calls GravStellar to run the code.

We plot the results for four intergation methods; diagnostic where there is no stellar evolution, stellar_first: start with stellar evolution, gravity_first: gravity simulator goes first, and the interlaced temporal discretization method. The interlaced temporal discretization method is when both the gravity simulator and the stellar evolution simulator are synchronized at regular time intervals
For all of these other than the diagnostic method, the time-step depends on the rate of mass loss and prevents the total mass loss from exceeding a limit set by the stellar_mass_fraction_loss variable, which ranged from 0.001 to 0.000001 of the total stellar mass of any of the stars.

We experimented with dynamical timesteps based off a maximum stellar mass loss of 0.001, 0.0001, 0.00005, 0.00001, 0.000005, 0.0000001 of the total stellar mass for any of the given stars. In addition, we experimented with inclinations of 0.573, 28.648, 57.296, and 85.944 degrees. These inclinations were chosen because they were close to the 0, 30, 60, 90 that we wanted, while if we inputted 1, 30, 60, 90, the inclination of the system seemed to end up differently, ~57 for 1, and ~116 for 90 for example, seemingly a bug in AMUSE.

Our plot for Timestep vs Walltime shows that the larger the timestep the longer it takes to run, but the amount of time spent in the simulation code vs the AMUSE framework is vastly different based on which gravity code was used and the timestep chosen. For the SmallN code, very little time was spent in the simulation code, instead much more time was spent in the framework once the stellar mass fraction dropped below around 0.0001, while for the Huayno code, the amount of time spent in AMUSE did not surpass the amount of time spent in the simulation code until the stellar mass fraction of less than 0.00002, around an order of magnitude smaller than for the SmallN code.
In our tests, the convergence seemed to be somewhere between 0.000005 and 0.000001, although we ran out of time to investigate this more. Convergence at either of those would mean that more time is spent in the AMUSE framework than the simulation code. For a stellar mass fraction of 0.000005, the timestep is close to that of the turning point in the walltime vs timestep graph where the time in AMUSE is much larger than the time in the simulation for the Huayno code, for both of these, the time spent in AMUSE is much larger than the time in the SmallN simulation for that choice.

Huayno
This simulator is simpletic, meaning that it conserves area. All plots produced using the Huayno integrator have "grav=huayno" in their file name.



Because of time constraints, we were not able to run all the codes or all the methods for very long times (> 1200 years) for most of them, but we do have two plots from running Huayno up to a time of 350000 years with a mass loss fraction of 0.001 and inclination of 0.573.
As can be sen in the plots "eccentricity_vs_time_dts=0.00100000_inc=0.573_grav=huayno_method=interlaced.png" and "semimajor_axis_vs_time_dts=0.00100000_inc=0.573_grav=huayno_method=interlaced.png", the code seems to be stable until near the end of the simulation. For both the eccentricity and the semimajor axis, massive changes occur near the end of the simulation,
as seemingly the error adds up during the large timesteps, as during that simulation, there were a total of 11 timesteps, averaging 31818 years each.
From  ALL_inclination_vs_time_inc=0.573_dts=0.00000100_grav=huayno_method=all, ALL_inclination_vs_time_inc=57.296_dts=0.00000100_grav=huayno_method=all, and ALL_inclination_vs_time_inc=0.573_dts=0.00000100_grav=huayno_method=all it is clear the the small the initial starting angle for inclination the more it changes over time with the general trend decreasing an almost negligible amount but if we ran the code for longer then 1000 years then we may see more of an effect on the inclination. There is a similar trend for inclination using the Hermite simulator as well. 

Hermite
This simulator is non-simpletic, meaning area is not convserved. All plots produced using the Hermite integrator have "grav=hermite" in their file name.
Looking at the ALL_eccentricity vs time at ~60 degrees inclination, you can tell that there is not much difference between the integration techniques interlaced, stellar_first, gravity_first follow the same trend of decreasing in time with negiable osscilations. are about what should be expected. From the ALL_eccetricity and ALL_semimajoraxis plots it is clear that across all time steps <= 1 degerees initial inclination is not stable.
There are no major differences ALL_semimajor vs time for all the time steps plots between Huayno and Hermite simulation results other then minor difference that can be seen in the diagnostic (which have not stellar evoltion)plots that show different trends which may mean that the gravity simulations' differences in turn be what causes slight differences in the trends of the other integration methods where stellar evolution does play a role.

You can find the plots discussed here in the assignment_two/Interesting_Plots.

SmallN
All plots produced using the SmallN integrator have "grav=smalln" in their file name. The SmallN code is very fast, by far the fastest of any of the gravity codes used in this project. This partly seems to come from SmallN being well suited for N-body tasks with N < 10, so for this system it is well suited. It is a fully time reversible code and so should conserve all relevant quantities.
From the walltime vs timestep plots made, comparing the ones whose filenames include grav=smalln vs those that have grav=huayno, the SmallN code is an order of magnitude or larger faster than the Huayno code and most likely Hermite code as well, since both of those codes seem to run on similar timescales.
Our results for the evolution of the semimajor axis in time using the SmallN simulator were different then Huayno and Hermite. Looking at the ALL_semimajor vs time plot for ~30 degrees inclination the inner orbit using the interlaced method shrinks over time unlike the results with the Huayno and Hermite methods where the semimajor axis grows over time. This plot also shows that using the SmallN simulator this is a big difference in results depending on if the Stellar evolution started first or gravity was called first. 
You can find the plots discussed here in the assignment_two/Interesting_Plots.

From our test we determined that the interlaced temporal discretization method is the best method. In this case, its output was between the gravity first method and stellar first method, leading us to believe that it is probably more accurate than doing one full time step of the stellar or gravity simulation and then one timestep of the other.
The interlaced method allows for the changes from either of the simulations to affect the other one because both the stellar and gravity simulations obtain updated information from the other during the interlaced timestep.


Across all the gravity simulators we noticed that from the plots of all of the integrations across multiple time steps (All_eccentricity_vs_time and All_semimajor) it is clear that the large time steps, > 0.001 are too big to converge. In addition, the plots inclination vs time for large times 

The optimum time step depends on the mass-loss rate of the star with the strongest wind because that is the star that is the most active.
The optimum time step depends on the initial relative inclination because that greatly effect the stability of the orbit.
Average wall clock time does change for lower initial inclination 

We ran our code so that it cut off before the stars went supernova  however in the real system if the WR48 star went supernova it would greatly effect the it binary star and the star orbiting the both of them. If they are close enough what would happen as WR48 starts to expand is accrete the mass of its neighbor star. To the point where the two cores would orbit each other spiraling closer and closer, expelling the mass between them to create a kind of envelope.  The remaining WR48 core collapses and would become a white dwarf and the when the aging companion star starts to swell its matter would be accreted to the white dwarf and it would supernova. This is all if they are close enough. When the star supernovas it would expel the core of the companion star. This would also greatly effect the out orbit star because the center of mass would change significantly

